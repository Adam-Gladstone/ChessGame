
12/06/2025
- add in game entity
	Game
	- date/time
	- player names
	- Global state: en passant, ....

- make the board non-const
- initialise
- work out the swap functionality
- work out the filter functionality

13/06/2025
- update the enum classes to return string views (for messages, reporting, logging etc)
- update the Move class to contain an optional source position
- update the turn logic
	- find a unique piece if it is not specified already
	- check that the path is clear (if needed)
	- complete turn with 'swap'; if it is an attack then remove the piece from the board and add to taken pieces

16/06/2025
- update logic to get moves

17/06/2025
- how to represent castling? promotion? etc
- implement a std::vector<Piece> taken; and the logic for 'x' moves.

19/06/2025
- update board initialisation to set the position for empty squares
- check castling logic
- remove swap functionality and replace it with simpler operation(s)

23/06/2025
- check the legal move generation
- improve output: include captured pieces

24/06/2025
- add support for reading in a 'pgn' file> https://en.wikipedia.org/wiki/Algebraic_notation_(chess)

27/06/2025
- split up the codebase into a library, a unit test suite, and a main program
- improve exception handling, reporting and logging

30/06/2025
- refactoring console application, library and unit tests

03/07/2025
- add move tests for each piece

14/07/2025
- add constructor semantics to Position so that it is always in bounds; change from struct to class
- refactor the to_index and to_coord as member functions
- add attributes
- change structs to classes where appropriate
- improve exception handling, reporting and logging

16/07/2025
- read in pgn file; get a list of moves; output game description
- add facility to play through pgn moves (like the pgn viewer)
- refactor the pgn class and check file reading logic.

17/07/2025
- refactor the Move struct into a class.
- add chess unicode character set
- split the move function into two: if(can_move(...)) move_piece(...)
- add in test for check mate
- store the web link to the game


To do:

Code
- improve underlying number representations: unsigned short = 0 - 65535 seems excessive for 64 cell locations etc: std::byte? unsigned char?
- improve the storage for the pgn text in Move: can it be a string view? or a smaller vector/array of char?


Display
- add a WinUI user-interface

Gameplay
- handle en passant and promotion: https://en.wikipedia.org/wiki/Rules_of_chess






Plan
- check in initial version (private)
- add a readme


https://chesstempo.com/game-database/game/fabiano-caruana-vs-grigoriy-oparin/6406691/60
"D:\Development\Projects\C++\ChessGame\Data\Caruana-Grigoriy-Classic-Play-In-2-2025-05-19.pgn"

https://chesstempo.com/game-database/game/vugar-ural-oglu-rasulov-vs-artin-ashraf/6413066/107
"D:\Development\Projects\C++\ChessGame\Data\Rasulov-Ashraf-Classic-Play-In-4-2025-05-19.pgn"


 This project is currently unfinished. It is a work in progress (see the changelog for a list of ...). It started out as a challenge after failing a job interview last month. The interview was for a CPP generalist role at a games company. In the last 15 minutes of the interview they asked me to "design a chess game". This threw me somewhat, as it is a little outside the (application) software I usually design. Furthermore the requirement appeared sufficiently complex that I needed more time to put my ideas in order. So I burbled something pretty incoherent. As a result I didn't get invited back for a further interview. However, the challenge got me thinking, and this project is the result.

The main focus of this project was to take a chess move (or a series of moves, a game in fact), in short pgn form and represent them on a chess board, essentially parsing a pgn move into a real move. 


Overview

Upcoming core featues

Errors

Source location

Installation

Quick Start


Note: This project is still a work in progress ...

Upcoming core featues

Short-algebraic notation to input moves
Popular chess variants (e.g. chess960, horde)
Puzzles from databases
Popular games history
Errors

Checkmate
Promotion


Last month, I went for an interview for a C++ 'generalist' role at a games company. In the last 15 minutes of the interview, I was asked to design a chess game. The question threw me as my knowledge of chess is quite basic and outside of my area of expertise. So I garbled an answer. Sadly I didn't get the job, but I couldn't stop thinking about the challenge of writing a chess game. So, I settled down, in my own time, and this is what I came up with.